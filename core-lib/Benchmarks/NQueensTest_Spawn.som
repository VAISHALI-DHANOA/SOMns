(* Copyright (c) 2001-2015 see AUTHORS file
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*)
(* https://github.com/vivkumar/TryCatchWS/blob/master/test/NQueens.java *)

class QueensSuite usingPlatform: platform andHarness: harness = (
| private Array     = platform kernel Array.
  private Benchmark = harness Benchmark.
  private Vector    = platform kernel Vector.
  private Mutex        = platform threading Mutex.
  private Task      = platform threading Task.
|)(
  public class Queens = Benchmark (
  | private size = 10. 
    nSolutions ::= 0.
    private lock = Mutex new. 
    private dResult = 724. |
  )(
    benchmark = (
      ^ compute.
    )

    verifyResult: result = (

      ('result: ' + result) println.
      result = dResult ifFalse: [error:'Incorrect Result: ' + result].

      ^ true.
    )

    private compute = (
      | a task |
      a := Array new: 0.
      task := nqueens: a and: 0.

      [nSolutions ~= dResult] whileTrue:[                                    
                                         nSolutions = dResult ifTrue: [ ^ nSolutions.].
                                        ].

       nSolutions = dResult ifTrue: [ ^ nSolutions.]
    
    )

    private nqueens: a and: depth = (
       size = depth ifTrue: [  lock critical: [ nSolutions := nSolutions + 1.                                                 
                                              ].
                               ^ nil 
                            ].
       
       ^ Task spawn: [ temp: a and: depth ].
    )

    private temp: a and: depth = (
      | tasks |
      tasks := Array new: size withAll: #empty.
      1 to: size do: [:i |
        | taskOrNil | 
        taskOrNil := nqueenskernel: a and: depth with: i - 1.
        tasks at: i put: taskOrNil.      
        ].

      tasks do: [:tOrN | tOrN notNil ifTrue: [ tOrN join. ] ]
    )

    private nqueenskernel: a and: depth with: index = (
      | b status |
      b := Array new: depth + 1 withAll: 0.

      1 to: depth do: [:i |
        b at: i put: (a at: i) ].

      b at: depth + 1 put: index.

      status := ok: depth + 1 and: b.
      status
        ifTrue:  [ ^ nqueens: b and: depth + 1 ]
        ifFalse: [ ^ nil ]
    )
    
    private ok: n and: a = (
      | p q |

      1 to: n do: [:i |
        p := a at: i. 
        i + 1 to: n do: [ :j | q := a at: j.
                          ( (q = p) || (q = (p - (j - i))) || (q = (p + (j - i))) )
                          ifTrue: [ ^ false ].
                        ].
                  ].
      ^ true.
    )
  ) : (
    public newInstance = ( ^ Queens new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )
)
